# Copyright 2018- The Pixie Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

'''
This query outputs a graph of the inbound connections to your cluster
(connections made from external IPs). Use this query with Grafana's Node Graph panel.

This query is for use with Grafana's Pixie Datasource Plugin only,
as it uses Grafana macros for adding Grafana dashboard context.
This query is a modification of the px/outbound_conns script:
https://github.com/pixie-io/pixie/tree/main/src/pxl_scripts/px/outbound_conns
'''

# Import Pixie's module for querying data.
import px


def outbound_conns():
    df = px.DataFrame(table='conn_stats', start_time=__time_from)

    df.namespace = df.ctx['namespace']
    df.service = df.ctx['service']
    df.node = df.ctx['node']
    df.pod = df.ctx['pod']

    # # Add optional filters:
    # Filter IP address of outbound reciever.
    # df = df[df.remote_addr == '10.38.0.15']
    # # Filter namespace, service, node or pod name of sending pod.
    # # Pixie formats service and pod names in the <namespace>/<pod,service> format.
    # df = df[df.service == 'px-sock-shop/front-end']
    # df = df[df.pod == '']
    # df = df[df.node == '']
    # df = df[df.namespace == '']

    # Filter for outbound traffic only.
    # Trace-role of 1 means client-side tracing. Pixie only traces
    # on the client side when traffic is leaving the cluster.
    df = df[df.trace_role == 1]

    # Filter out any connections from known pods.
    df.remote_pod_id = px.ip_to_pod_id(df.remote_addr)
    df.remote_service_id = px.ip_to_service_id(df.remote_addr)
    df = df[df.remote_pod_id == '' and df.remote_service_id == '']

    # Filter out connections from localhost.
    df = df[not df.remote_addr == '127.0.0.1']
    df = df[not df.remote_addr == '0.0.0.0']

    # Calculate connection stats for each process for each unique pod / remote_addr pair.
    df = df.groupby(['pod', 'upid', 'remote_addr', 'remote_port']).agg(
        # The fields below are counters per UPID, so we take
        # the min (starting value) and the max (ending value) to subtract them.
        conn_open_min=('conn_open', px.min),
        conn_open_max=('conn_open', px.max),
        bytes_sent_min=('bytes_sent', px.min),
        bytes_sent_max=('bytes_sent', px.max),
        bytes_recv_min=('bytes_recv', px.min),
        bytes_recv_max=('bytes_recv', px.max),
    )

    # Calculate connection stats over the time window.
    df.conn_open = df.conn_open_max - df.conn_open_min
    df.bytes_sent = df.bytes_sent_max - df.bytes_sent_min
    df.bytes_recv = df.bytes_recv_max - df.bytes_recv_min

    # Calculate connection stats for each unique pod / remote_addr pair. Since there
    # may be multiple processes per pod we perform an additional aggregation to
    # consolidate those into one entry.
    df = df.groupby(['pod', 'remote_addr', 'remote_port']).agg(
        connections_open=('conn_open', px.sum),
        bytes_sent=('bytes_sent', px.sum),
        bytes_recv=('bytes_recv', px.sum),
    )

    df.kbytes_sent = df.bytes_sent / 1000
    df.kbytes_recv = df.bytes_recv / 1000
    df.kbytes_total = df.kbytes_sent + df.kbytes_recv

    # Resolve remote addresses to public domain.
    df.domain = px.nslookup(df.remote_addr)
    df.domain = px.select(df.domain == df.remote_addr, '', df.domain)

    return df[['pod', 'remote_addr', 'remote_port', 'domain', 'connections_open', 'kbytes_sent',
               'kbytes_recv', 'kbytes_total']]


# Construct the nodes table for the Node Graph panel.
# https://grafana.com/docs/grafana/next/visualizations/node-graph/#node-parameters
def nodes():
    df1 = outbound_conns()
    df1.id = df1.pod
    df1.title = df1.pod
    df1 = df1.groupby(['id', 'title']).agg()
    df2 = outbound_conns()
    df2.id = df2.remote_addr
    df2.title = df2.remote_addr
    df2 = df2.groupby(['id', 'title']).agg()
    return df1.append(df2)


# Construct the edges table for the Node Graph panel.
# https://grafana.com/docs/grafana/next/visualizations/node-graph/#edge-parameters
def edges():
    df = outbound_conns()
    df.source = df.pod
    df.target = df.remote_addr
    df.id = df.source + '-' + df.target
    df.mainStat = df.kbytes_sent
    df.secondaryStat = df.kbytes_recv
    return df[['id', 'source', 'target', 'mainStat', 'secondaryStat']]


# Display the tables.
nodes = nodes()
px.display(nodes, "nodes")

edges = edges()
px.display(edges, "edges")
