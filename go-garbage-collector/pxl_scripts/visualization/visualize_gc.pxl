# Copyright 2018- The Pixie Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

import px

GCTable = 'GC'
gcWaitOnMarkTable = 'gcWaitOnMark'
gcSweepTable = 'gcSweep'
stopTheWorldWithSemaTable = 'stopTheWorldWithSema'
startTheWorldWithSemaTable = 'startTheWorldWithSema'
markTable = 'gcDrainN'
sweepTable = 'sweepone'
allocTable = 'allocSpan'
gcSetTriggerRatioTable = 'gcSetTriggerRatio'
gcAssistAlloc1Table = 'gcAssistAlloc1'

# Get the bin size in nanoseconds for the timeseries charts.
def get_bin_size(start_time: str):
    duration_ns = px.abs(px.parse_duration(start_time))
    bin_size_ns = px.select(duration_ns > 0, px.ceil(duration_ns/1000), 1000*1000*1000)
    return px.DurationNanos(bin_size_ns)


highlevel_cols = ['time_', 'event', 'goid_', 'latency']

def get_highlevel_event_table(table: str, start_time: str):
    df = px.DataFrame(table, start_time=start_time)
    df.event = table
    df = df[highlevel_cols]
    return df    

def highlevel_events(start_time: str):
    gc = get_highlevel_event_table(GCTable, start_time)
    gcWaitOnMark = get_highlevel_event_table(gcWaitOnMarkTable, start_time)
    gcSweep = get_highlevel_event_table(gcSweepTable, start_time)
    return gc.append([gcWaitOnMark, gcSweep])

mark_sweep_alloc_cols = ['time_', 'event', 'goid_', 'latency', 'mark work units', 'pages']

def mark_events(start_time: str):
    mark = px.DataFrame(markTable, start_time=start_time)
    mark.event = markTable
    mark['mark work units'] = mark.scanWorkPerformed
    mark.pages = 0
    mark = mark[mark_sweep_alloc_cols]
    return mark

def sweep_events(start_time: str):
    sweep = px.DataFrame(sweepTable, start_time=start_time)
    sweep.event = sweepTable
    sweep['mark work units'] = 0
    sweep.pages = sweep.npages
    sweep = sweep[mark_sweep_alloc_cols]
    return sweep

def alloc_events(start_time: str):
    alloc = px.DataFrame(allocTable, start_time=start_time)
    alloc.event = allocTable
    alloc['mark work units'] = 0
    alloc.pages = alloc.npages
    alloc = alloc[mark_sweep_alloc_cols]
    return alloc

def mark_alloc_sweep_events(start_time: str):
    events = mark_events(start_time).append([sweep_events(start_time), alloc_events(start_time)])
    return events    

def mark_timeseries(start_time: str):
    df = mark_events(start_time)
    df.time_ = px.bin(df.time_, get_bin_size(start_time))
    df = df.groupby(['time_']).agg(
      mark_work_units=('mark work units', px.sum)
    )
    return df    

def sweep_timeseries(start_time: str):
    df = sweep_events(start_time)
    df.time_ = px.bin(df.time_, get_bin_size(start_time))
    df = df.groupby(['time_']).agg(
      pages_swept=('pages', px.sum)
    )
    return df

def alloc_timeseries(start_time: str):
    df = alloc_events(start_time)
    df.time_ = px.bin(df.time_, get_bin_size(start_time))
    df = df.groupby(['time_']).agg(
      pages_alloc=('pages', px.sum)
    )
    return df    

def trigger_ratio(start_time: str):
    df = px.DataFrame(gcSetTriggerRatioTable, start_time=start_time)
    df.ratio = df.triggerRatio
    return df

def assist_alloc_timeseries(start_time: str):
    df = px.DataFrame(table=gcAssistAlloc1Table, start_time=start_time)
    df.time_ = px.bin(df.time_, get_bin_size(start_time))
    df = df.groupby(['time_']).agg(
      work_units=('scanWork', px.sum)
    )
    return df
