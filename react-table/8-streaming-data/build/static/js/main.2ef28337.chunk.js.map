{"version":3,"sources":["Table.module.css","ColumnSelector.module.css","utils/useData.js","Filter.module.css","Filter.js","ColumnSelector.js","Table.js","utils/useContainerSize.js","utils/useScrollbarSize.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","randomFrom","array","Math","floor","random","length","generateRow","minTimestamp","maxTimestamp","status","timestamp","latencyMs","endpoint","columns","Header","Cell","value","className","Date","toLocaleString","accessor","color","digit","split","range","useStreamingData","rowsPerBatch","delay","maxBatches","React","now","setMinTimestamp","batches","setBatches","addBatch","shift","batch","Array","fill","map","_","i","newTimer","global","setInterval","clearInterval","data","flat","Filter","onChange","setValue","onChangeWrapper","event","v","target","trim","styles","type","placeholder","ColumnSelector","Label","Checkboxes","column","Checkbox","getToggleHiddenProps","id","TableContext","BodyRow","index","style","rows","prepareRow","instance","row","Row","getRowProps","cells","cell","BodyCell","getCellProps","render","ForcedScrollWrapper","props","ref","overflowY","forwardedRef","Table","el","reactTable","useTable","autoResetSortBy","autoResetResize","disableSortRemove","initialState","sortBy","desc","useFlexLayout","useGlobalFilter","useSortBy","useResizeColumns","getTableProps","getTableBodyProps","headerGroups","allColumns","setGlobalFilter","scrollbarWidth","scroller","document","createElement","setAttribute","body","appendChild","width","offsetWidth","clientWidth","height","offsetHeight","clientHeight","removeChild","fillContainer","setFillContainer","fillContainerRef","fillHeight","visibleStart","setVisibleStart","visibleStop","setVisibleStop","viewportDetails","count","text","onRowsRendered","visibleStartIndex","visibleStopIndex","context","state","Provider","root","TableHead","group","gi","getHeaderGroupProps","headers","ci","HeaderCell","getHeaderProps","marginRight","getSortByToggleProps","isSorted","isSortedDesc","getResizerProps","ResizeHandle","isResizing","ResizeHandleActive","filter","x","join","TableBody","outerElementType","itemCount","itemSize","onItemsRendered","ViewportDetails","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2ef28337.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Table_root__3x77O\",\"fill\":\"Table_fill__3Frg4\",\"Table\":\"Table_Table__gTzsf\",\"Row\":\"Table_Row__29GKa\",\"BodyCell\":\"Table_BodyCell__2gQ09\",\"HeaderCell\":\"Table_HeaderCell__37MIo\",\"ResizeHandle\":\"Table_ResizeHandle__1LDIp\",\"ResizeHandleActive\":\"Table_ResizeHandleActive__-UEDL\",\"ViewportDetails\":\"Table_ViewportDetails__3WWed\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ColumnSelector\":\"ColumnSelector_ColumnSelector__1LtuL\",\"Label\":\"ColumnSelector_Label__Znnco\",\"Checkbox\":\"ColumnSelector_Checkbox__3CcNf\"};","import * as React from 'react';\n\nimport './useData.css';\n\nconst TimestampCell = ({ value }) => (\n  <span className='Cell-Timestamp'>\n    <span>{new Date(value).toLocaleString()}</span>\n  </span>\n);\nconst LatencyCell = ({ value }) => {\n  let color = 'bad';\n  if (value <= 50) color = 'good';\n  else if (value <= 100) color = 'weak';\n\n  return <span className={`Cell-Latency ${color}`}>{ value }</span>;\n};\nconst EndpointCell = ({ value }) => {\n  return <span className='Cell-Endpoint'>{ value }</span>;\n};\nconst StatusCell = ({ value }) => {\n  const digit = +value.split(' ')[0];\n  let range = 500;\n  if (digit < 300) range = 200;\n  else if (digit < 400) range = 300;\n  else if (digit < 500) range = 400;\n  return <span className={`Cell-StatusCode range-${range}`}>{ value }</span>;\n};\n\nfunction randomFrom(array) {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nfunction generateRow(minTimestamp, maxTimestamp) {\n  const status = randomFrom([\n    '200 OK', '301 Moved Permanently', '404 Not Found', \"418 I'm a teapot\", '501 Not Implemented'\n  ]);\n  return {\n    timestamp: minTimestamp + Math.floor(Math.random() * (maxTimestamp - minTimestamp)),\n    latencyMs: 5 + Math.floor(Math.random() * 150),\n    // Fun bit of lore: https://wiki.ubuntu.com/DevelopmentCodeNames\n    endpoint: '/user/' + randomFrom([\n      'bendy-badger', 'happy-hippo', 'giant-ape', 'grumpy-groundhog', 'phlegmatic-pheasant'\n    ]),\n    status,\n  };\n}\n\nconst columns = [\n  { Header: 'Timestamp', Cell: TimestampCell, accessor: 'timestamp' },\n  { Header: 'Latency',   Cell: LatencyCell,   accessor: 'latencyMs' },\n  { Header: 'Endpoint',  Cell: EndpointCell,  accessor: 'endpoint' },\n  { Header: 'Status',    Cell: StatusCell,    accessor: 'status' },\n];\n\n// react-table expects memoized columns and data, so we export a React hook to permit doing that.\nexport function useStaticData(numRows = 20) {\n  const data = React.useMemo(() => {\n    const maxTimestamp = Date.now();\n    const minTimestamp = maxTimestamp - (1000 * 60 * 60 * 24 * 7);\n    return Array(numRows).fill(0).map(() => generateRow(minTimestamp, maxTimestamp));\n  }, [numRows]);\n  return { columns, data };\n}\n\nexport function useStreamingData(rowsPerBatch = 5, delay = 1000, maxBatches = 100) {\n  const [minTimestamp, setMinTimestamp] = React.useState(Date.now() - 1000 * 60 * 60 * 24 * 7);\n  const [batches, setBatches] = React.useState([]);\n\n  const addBatch = React.useCallback(() => {\n    // If we're at the limit, remove the oldest batch before adding a new one.\n    if (batches.length >= maxBatches) batches.shift();\n\n    const batch = Array(rowsPerBatch).fill(0).map(\n      (_, i) => generateRow(minTimestamp + i * 1000, minTimestamp + i * 1999));\n    setBatches([...batches, batch]);\n    setMinTimestamp(minTimestamp + rowsPerBatch * 2000);\n  }, [batches, maxBatches, minTimestamp, rowsPerBatch]);\n\n  // Start with one batch already loaded\n  React.useEffect(() => {\n    addBatch();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  React.useEffect(() => {\n    const newTimer = global.setInterval(addBatch, delay);\n    return () => {\n      global.clearInterval(newTimer);\n    };\n  }, [delay, addBatch]);\n\n  return React.useMemo(() => ({ columns, data: batches.flat() }), [batches]);\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Filter\":\"Filter_Filter__3qIm_\"};","import * as React from 'react';\n\nimport styles from './Filter.module.css';\n\nexport default function Filter({ onChange }) {\n  const [value, setValue] = React.useState('');\n\n  const onChangeWrapper = React.useCallback((event) => {\n    const v = event.target.value.trim();\n    setValue(v);\n    onChange(v);\n  }, [onChange]);\n\n  return (\n    <div className={styles.Filter}>\n      <input type=\"text\" value={value} placeholder='Search rows...' onChange={onChangeWrapper} />\n    </div>\n  );\n}","import styles from './ColumnSelector.module.css';\n\nexport default function ColumnSelector({ columns }) {\n  return (\n    <div className={styles.ColumnSelector}>\n      <div className={styles.Label}>Show Columns:</div>\n      <div className={styles.Checkboxes}>\n        {columns.map(column => (\n          <div key={column.id} className={styles.Checkbox}>\n            <label>\n              <input type='checkbox' {...column.getToggleHiddenProps()} />\n              {` ${column.Header}`}\n            </label>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}","import * as React from 'react';\n\nimport styles from './Table.module.css'\nimport Filter from './Filter.js';\nimport ColumnSelector from './ColumnSelector.js';\nimport { useContainerSize } from './utils/useContainerSize';\nimport { useScrollbarSize } from './utils/useScrollbarSize';\n\nimport {\n  useTable,\n  useFlexLayout,\n  useGlobalFilter,\n  useSortBy,\n  useResizeColumns,\n} from 'react-table';\nimport { FixedSizeList } from 'react-window';\n\nconst TableContext = React.createContext(null);\n\n/**\n * By memoizing this, we ensure that react-window can recycle rendered rows that haven't changed when new data comes in.\n */\nconst BodyRow = React.memo(({ index, style }) => {\n  const { rows, instance: { prepareRow } } = React.useContext(TableContext);\n  const row = rows[index];\n  prepareRow(row);\n  return (\n    <div className={styles.Row} {...row.getRowProps({ style })}>\n      {row.cells.map(cell => (\n        <div className={styles.BodyCell} {...cell.getCellProps()}>\n          {cell.render('Cell')}\n        </div>\n      ))}\n    </div>\n  );\n});\n\n/**\n * Setting outerElementType on FixedSizeList lets us override properties on the scroll container. However, FixedSizeList\n * redraws this on every data change, so the wrapper component needs to be memoized for scroll position to be retained.\n *\n * Note: If the list is sorted such that new items are added to the top, the items in view will still change\n * because the ones that _were_ at that scroll position were pushed down.\n * This can be accounted in a more complete implementation, but it's out of scope of this demonstration.\n */\nconst ForcedScrollWrapper = React.memo((props, ref) => (\n  // Instead of handling complexity with when the scrollbar is/isn't visible for this basic tutorial,\n  // instead force the scrollbar to appear even when it isn't needed. Not great, but out of scope.\n  <div {...props} style={{ ...props.style, overflowY: 'scroll' }} forwardedRef={ref}></div>\n));\n\nconst Table = React.memo(({ data: { columns, data } }) => {\n  const reactTable = useTable({\n      columns,\n      data,\n      autoResetSortBy: false,\n      autoResetResize: false,\n      disableSortRemove: true,\n      initialState: {\n        sortBy: [{ id: 'timestamp', desc: false }],\n      },\n    },\n    useFlexLayout,\n    useGlobalFilter,\n    useSortBy,\n    useResizeColumns\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    allColumns,\n    setGlobalFilter\n  } = reactTable;\n\n  const { width: scrollbarWidth } = useScrollbarSize();\n\n  const [fillContainer, setFillContainer] = React.useState(null)\n  const fillContainerRef = React.useCallback((el) => setFillContainer(el), []);\n  const { height: fillHeight } = useContainerSize(fillContainer);\n\n  const [visibleStart, setVisibleStart] = React.useState(1);\n  const [visibleStop, setVisibleStop] = React.useState(1);\n  const viewportDetails = React.useMemo(() => {\n    const count = visibleStop - visibleStart + 1;\n    let text = `Showing ${visibleStart + 1} - ${visibleStop + 1} / ${rows.length} records`;\n    if (rows.length === 500) text += ' (most recent only)';\n\n    if (count <= 0) {\n      text = 'No records to show';\n    } else if (count >= rows.length) {\n      text = '\\xa0'; // non-breaking space\n    }\n    return text;\n  }, [rows.length, visibleStart, visibleStop]);\n\n  const onRowsRendered = React.useCallback(({ visibleStartIndex, visibleStopIndex }) => {\n    setVisibleStart(visibleStartIndex);\n    setVisibleStop(visibleStopIndex);\n  }, []);\n\n  const context = React.useMemo(() => ({\n    instance: reactTable,\n    rows,\n    // By also watching reactTable.state specifically, we make sure that resizing columns is reflected immediately.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }), [reactTable, rows, reactTable.state]);\n\n  return (\n    <TableContext.Provider value={context}>\n      <div className={styles.root}>\n        <header>\n          <ColumnSelector columns={allColumns} />\n          <Filter onChange={setGlobalFilter} />\n        </header>\n        <div className={styles.fill} ref={fillContainerRef}>\n          <div {...getTableProps()} className={styles.Table}>\n            <div className={styles.TableHead}>\n              {headerGroups.map((group, gi) => (\n                <div className={styles.Row} {...group.getHeaderGroupProps()}>\n                  {group.headers.map((column, ci) => (\n                    <div className={styles.HeaderCell} {...column.getHeaderProps({\n                      style: (gi === headerGroups.length - 1 && ci === group.headers.length - 1)\n                      ? { marginRight: scrollbarWidth }\n                      :  {}\n                    })}>\n                      <div {...column.getSortByToggleProps()}>\n                        {column.render('Header')}\n                        <span>\n                          {column.isSorted ? (\n                            column.isSortedDesc ? ' 🔽' : ' 🔼'\n                          ): ''}\n                        </span>\n                      </div>\n                      <div {...column.getResizerProps()} className={[styles.ResizeHandle, column.isResizing && styles.ResizeHandleActive].filter(x=>x).join(' ')}>\n                        &#x22EE;\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ))}\n            </div>\n            <div className={styles.TableBody} {...getTableBodyProps()}>\n              <FixedSizeList\n                outerElementType={ForcedScrollWrapper}\n                itemCount={rows.length}\n                height={fillHeight - 56}\n                itemSize={34}\n                onItemsRendered={onRowsRendered}\n              >\n                {BodyRow}\n              </FixedSizeList>\n            </div>\n          </div>\n        </div>\n        <div className={styles.ViewportDetails} style={{ marginRight: scrollbarWidth }}>\n          {viewportDetails}\n        </div>\n      </div>\n    </TableContext.Provider>\n  );\n});\n\nexport default Table;\n","import * as React from 'react';\n\n/**\n * Oversimplified way to get the scroll container dimensions of an element.\n * If those dimensions vary with the size of those children, and those children try to use this,\n * there will be a loop. Use a more complex technique like `react-virtualized-autosizer` for those scenarios.\n */\nexport function useContainerSize(el) {\n  return React.useMemo(() => {\n    if (el) {\n      return {\n        width: el.clientWidth,\n        height: el.clientHeight,\n      };\n    }\n\n    return { width: 0, height: 0 };\n  }, [el]);\n}\n","import * as React from 'react';\n\n/**\n * Determines the dimensions of the browser scrollbars when they would be shown.\n * Browsers may overlay scrollbars rather than putting them in-layout. In those cases they're treated as 0-width/height.\n */\n export function useScrollbarSize() {\n  return React.useMemo(() => {\n    const scroller = document.createElement('div');\n    scroller.setAttribute('style', 'width: 100vw; height: 100vh; overflow: scroll; position: absolute; top: -100vh;');\n    document.body.appendChild(scroller);\n    const width = scroller.offsetWidth - scroller.clientWidth;\n    const height = scroller.offsetHeight - scroller.clientHeight;\n    document.body.removeChild(scroller);\n    return { width, height };\n  }, []);\n}\n","import * as React from 'react';\n\nimport { useStreamingData } from './utils/useData.js';\nimport Table from './Table.js';\n\nimport './App.css';\n\nfunction App() {\n  const data = useStreamingData();\n  return (\n    <main className=\"App\">\n      <Table data={data} />\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}