{"version":3,"sources":["Table.module.css","ColumnSelector.module.css","utils/useData.js","Filter.module.css","Filter.js","ColumnSelector.js","Table.js","utils/useContainerSize.js","utils/useScrollbarSize.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","randomFrom","array","Math","floor","random","length","generateRow","minTimestamp","maxTimestamp","status","timestamp","latencyMs","endpoint","columns","Header","Cell","value","className","Date","toLocaleString","accessor","color","digit","split","range","useStreamingData","rowsPerBatch","delay","maxBatches","React","now","setMinTimestamp","batches","setBatches","addBatch","batch","Array","fill","map","_","i","newTimer","global","setInterval","clearInterval","data","flat","Filter","onChange","setValue","onChangeWrapper","event","v","target","trim","styles","type","placeholder","ColumnSelector","Label","Checkboxes","column","Checkbox","getToggleHiddenProps","id","Table","el","reactTable","useTable","useFlexLayout","useGlobalFilter","useSortBy","useResizeColumns","getTableProps","getTableBodyProps","headerGroups","rows","allColumns","prepareRow","setGlobalFilter","scrollbarWidth","scroller","document","createElement","setAttribute","body","appendChild","width","offsetWidth","clientWidth","height","offsetHeight","clientHeight","removeChild","fillContainer","setFillContainer","fillContainerRef","fillHeight","root","ref","TableHead","group","gi","Row","getHeaderGroupProps","headers","ci","HeaderCell","getHeaderProps","style","marginRight","getSortByToggleProps","render","isSorted","isSortedDesc","getResizerProps","ResizeHandle","isResizing","ResizeHandleActive","filter","x","join","TableBody","outerElementType","props","overflowY","forwardedRef","itemCount","itemSize","index","row","getRowProps","cells","cell","BodyCell","getCellProps","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.bc78bca4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Table_root__3x77O\",\"fill\":\"Table_fill__3Frg4\",\"Table\":\"Table_Table__gTzsf\",\"Row\":\"Table_Row__29GKa\",\"BodyCell\":\"Table_BodyCell__2gQ09\",\"HeaderCell\":\"Table_HeaderCell__37MIo\",\"ResizeHandle\":\"Table_ResizeHandle__1LDIp\",\"ResizeHandleActive\":\"Table_ResizeHandleActive__-UEDL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ColumnSelector\":\"ColumnSelector_ColumnSelector__1LtuL\",\"Label\":\"ColumnSelector_Label__Znnco\",\"Checkbox\":\"ColumnSelector_Checkbox__3CcNf\"};","import * as React from 'react';\n\nimport './useData.css';\n\nconst TimestampCell = ({ value }) => (\n  <span className='Cell-Timestamp'>\n    <span>{new Date(value).toLocaleString()}</span>\n  </span>\n);\nconst LatencyCell = ({ value }) => {\n  let color = 'bad';\n  if (value <= 50) color = 'good';\n  else if (value <= 100) color = 'weak';\n\n  return <span className={`Cell-Latency ${color}`}>{ value }</span>;\n};\nconst EndpointCell = ({ value }) => {\n  return <span className='Cell-Endpoint'>{ value }</span>;\n};\nconst StatusCell = ({ value }) => {\n  const digit = +value.split(' ')[0];\n  let range = 500;\n  if (digit < 300) range = 200;\n  else if (digit < 400) range = 300;\n  else if (digit < 500) range = 400;\n  return <span className={`Cell-StatusCode range-${range}`}>{ value }</span>;\n};\n\nfunction randomFrom(array) {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nfunction generateRow(minTimestamp, maxTimestamp) {\n  const status = randomFrom([\n    '200 OK', '301 Moved Permanently', '404 Not Found', \"418 I'm a teapot\", '501 Not Implemented'\n  ]);\n  return {\n    timestamp: minTimestamp + Math.floor(Math.random() * (maxTimestamp - minTimestamp)),\n    latencyMs: 5 + Math.floor(Math.random() * 150),\n    // Fun bit of lore: https://wiki.ubuntu.com/DevelopmentCodeNames\n    endpoint: '/user/' + randomFrom([\n      'bendy-badger', 'happy-hippo', 'giant-ape', 'grumpy-groundhog', 'phlegmatic-pheasant'\n    ]),\n    status,\n  };\n}\n\nconst columns = [\n  { Header: 'Timestamp', Cell: TimestampCell, accessor: 'timestamp' },\n  { Header: 'Latency',   Cell: LatencyCell,   accessor: 'latencyMs' },\n  { Header: 'Endpoint',  Cell: EndpointCell,  accessor: 'endpoint' },\n  { Header: 'Status',    Cell: StatusCell,    accessor: 'status' },\n];\n\n// react-table expects memoized columns and data, so we export a React hook to permit doing that.\nexport function useStaticData(numRows = 20) {\n  const data = React.useMemo(() => {\n    const maxTimestamp = Date.now();\n    const minTimestamp = maxTimestamp - (1000 * 60 * 60 * 24 * 7);\n    return Array(numRows).fill(0).map(() => generateRow(minTimestamp, maxTimestamp));\n  }, [numRows]);\n  return { columns, data };\n}\n\nexport function useStreamingData(rowsPerBatch = 5, delay = 1000, maxBatches = 100) {\n  const [minTimestamp, setMinTimestamp] = React.useState(Date.now() - 1000 * 60 * 60 * 24 * 7);\n  const [batches, setBatches] = React.useState([]);\n\n  const addBatch = React.useCallback(() => {\n    if (batches.length >= maxBatches) return;\n    const batch = Array(rowsPerBatch).fill(0).map(\n      (_, i) => generateRow(minTimestamp + i * 1000, minTimestamp + i * 1999));\n    setBatches([...batches, batch]);\n    setMinTimestamp(minTimestamp + rowsPerBatch * 2000);\n  }, [batches, maxBatches, minTimestamp, rowsPerBatch]);\n\n  React.useEffect(() => {\n    const newTimer = global.setInterval(addBatch, delay);\n    return () => {\n      global.clearInterval(newTimer);\n    };\n  }, [delay, addBatch]);\n\n  return React.useMemo(() => ({ columns, data: batches.flat() }), [batches]);\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Filter\":\"Filter_Filter__3qIm_\"};","import * as React from 'react';\n\nimport styles from './Filter.module.css';\n\nexport default function Filter({ onChange }) {\n  const [value, setValue] = React.useState('');\n\n  const onChangeWrapper = React.useCallback((event) => {\n    const v = event.target.value.trim();\n    setValue(v);\n    onChange(v);\n  }, [onChange]);\n\n  return (\n    <div className={styles.Filter}>\n      <input type=\"text\" value={value} placeholder='Search rows...' onChange={onChangeWrapper} />\n    </div>\n  );\n}","import styles from './ColumnSelector.module.css';\n\nexport default function ColumnSelector({ columns }) {\n  return (\n    <div className={styles.ColumnSelector}>\n      <div className={styles.Label}>Show Columns:</div>\n      <div className={styles.Checkboxes}>\n        {columns.map(column => (\n          <div key={column.id} className={styles.Checkbox}>\n            <label>\n              <input type='checkbox' {...column.getToggleHiddenProps()} />\n              {` ${column.Header}`}\n            </label>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}","import * as React from 'react';\n\nimport styles from './Table.module.css'\nimport Filter from './Filter.js';\nimport ColumnSelector from './ColumnSelector.js';\nimport { useContainerSize } from './utils/useContainerSize';\nimport { useScrollbarSize } from './utils/useScrollbarSize';\n\nimport {\n  useTable,\n  useFlexLayout,\n  useGlobalFilter,\n  useSortBy,\n  useResizeColumns,\n} from 'react-table';\nimport { FixedSizeList } from 'react-window';\n\nexport default function Table({ data: { columns, data } }) {\n  const reactTable = useTable({\n      columns,\n      data\n    },\n    useFlexLayout,\n    useGlobalFilter,\n    useSortBy,\n    useResizeColumns\n  );\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    allColumns,\n    prepareRow,\n    setGlobalFilter\n  } = reactTable;\n\n  const { width: scrollbarWidth } = useScrollbarSize();\n\n  const [fillContainer, setFillContainer] = React.useState(null)\n  const fillContainerRef = React.useCallback((el) => setFillContainer(el), []);\n  const { height: fillHeight } = useContainerSize(fillContainer);\n\n  return (\n    <div className={styles.root}>\n      <header>\n        <ColumnSelector columns={allColumns} />\n        <Filter onChange={setGlobalFilter} />\n      </header>\n      <div className={styles.fill} ref={fillContainerRef}>\n        <div {...getTableProps()} className={styles.Table}>\n          <div className={styles.TableHead}>\n            {headerGroups.map((group, gi) => (\n              <div className={styles.Row} {...group.getHeaderGroupProps()}>\n                {group.headers.map((column, ci) => (\n                  <div className={styles.HeaderCell} {...column.getHeaderProps({\n                    style: (gi === headerGroups.length - 1 && ci === group.headers.length - 1)\n                    ? { marginRight: scrollbarWidth }\n                    :  {}\n                  })}>\n                    <div {...column.getSortByToggleProps()}>\n                      {column.render('Header')}\n                      <span>\n                        {column.isSorted ? (\n                          column.isSortedDesc ? ' 🔽' : ' 🔼'\n                        ): ''}\n                      </span>\n                    </div>\n                    <div {...column.getResizerProps()} className={[styles.ResizeHandle, column.isResizing && styles.ResizeHandleActive].filter(x=>x).join(' ')}>\n                      &#x22EE;\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ))}\n          </div>\n          <div className={styles.TableBody} {...getTableBodyProps()}>\n            {/*\n              * This has a few problems once we use 10,000 rows and add virtual scrolling:\n              * - At 10,000 rows, sorting and filtering slow down quite a lot. We'll address that later.\n              *   Virtual scrolling speeds up scrolling and resizing columns, but sorting and filtering still chug.\n              */}\n            <FixedSizeList\n              outerElementType={(props, ref) => (\n                // Instead of handling complexity with when the scrollbar is/isn't visible for this basic tutorial,\n                // we'll instead force the scrollbar to appear even when it isn't needed. Suboptimal, but out of scope.\n                <div {...props} style={{ ...props.style, overflowY: 'scroll' }} forwardedRef={ref}></div>\n              )}\n              itemCount={rows.length}\n              height={fillHeight - 56}\n              itemSize={34}\n            >\n              {({ index, style }) => {\n                const row = rows[index];\n                prepareRow(row);\n                return <div className={styles.Row} {...row.getRowProps({ style })}>\n                  {row.cells.map(cell => (\n                    <div className={styles.BodyCell} {...cell.getCellProps()}>\n                      {cell.render('Cell')}\n                    </div>\n                  ))}\n                </div>\n              }}\n            </FixedSizeList>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","import * as React from 'react';\n\n/**\n * Oversimplified way to get the scroll container dimensions of an element.\n * If those dimensions vary with the size of those children, and those children try to use this,\n * there will be a loop. Use a more complex technique like `react-virtualized-autosizer` for those scenarios.\n */\nexport function useContainerSize(el) {\n  return React.useMemo(() => {\n    if (el) {\n      return {\n        width: el.clientWidth,\n        height: el.clientHeight,\n      };\n    }\n\n    return { width: 0, height: 0 };\n  }, [el]);\n}\n","import * as React from 'react';\n\n/**\n * Determines the dimensions of the browser scrollbars when they would be shown.\n * Browsers may overlay scrollbars rather than putting them in-layout. In those cases they're treated as 0-width/height.\n */\n export function useScrollbarSize() {\n  return React.useMemo(() => {\n    const scroller = document.createElement('div');\n    scroller.setAttribute('style', 'width: 100vw; height: 100vh; overflow: scroll; position: absolute; top: -100vh;');\n    document.body.appendChild(scroller);\n    const width = scroller.offsetWidth - scroller.clientWidth;\n    const height = scroller.offsetHeight - scroller.clientHeight;\n    document.body.removeChild(scroller);\n    return { width, height };\n  }, []);\n}\n","import * as React from 'react';\n\nimport { useStreamingData } from './utils/useData.js';\nimport Table from './Table.js';\n\nimport './App.css';\n\nfunction App() {\n  const data = useStreamingData();\n  return (\n    <main className=\"App\">\n      <Table data={data} />\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}